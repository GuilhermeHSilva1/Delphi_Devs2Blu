unit UfrmPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, REST.Types, REST.Client,
  Data.Bind.Components, Data.Bind.ObjectScope;

type
  TForm2 = class(TForm)
    edtPrimeiroValor: TEdit;
    edtSegundoValor: TEdit;
    btnSomar: TButton;
    btnMultiplicar: TButton;
    btnSubtrair: TButton;
    btnDividir: TButton;
    Label1: TLabel;
    Label2: TLabel;
    lblResultado: TLabel;
    RESTClient1: TRESTClient;
    RESTRequest1: TRESTRequest;
    RESTResponse1: TRESTResponse;
    procedure btnSomarClick(Sender: TObject);
    procedure btnSubtrairClick(Sender: TObject);
    procedure btnMultiplicarClick(Sender: TObject);
    procedure btnDividirClick(Sender: TObject);
  private
    { Private declarations }
    procedure Calcular(pOperacao: String);
  public
    { Public declarations }
  end;

var
  Form2: TForm2;

const URL = 'http://localhost:1234/%s/%f/%f';

implementation

{$R *.dfm}

procedure TForm2.btnDividirClick(Sender: TObject);
begin
  if edtSegundoValor.Text = '0' then
    showMessage('Impossivel dividir por 0')
  else
    Self.Calcular('dividir');
end;

procedure TForm2.btnMultiplicarClick(Sender: TObject);
begin
  Self.Calcular('multiplicar');
end;

procedure TForm2.btnSomarClick(Sender: TObject);
begin
  Self.Calcular('somar');
end;

procedure TForm2.btnSubtrairClick(Sender: TObject);
begin
  Self.Calcular('subtrair');
end;

procedure TForm2.Calcular(pOperacao: String);
var
  xValor1, xValor2: Double;
begin


  if not TryStrToFloat(edtPrimeiroValor.Text, xValor1) then
    raise Exception.Create('Primeiro valor invalido');

  if not TryStrToFloat(edtSegundoValor.Text, xValor2) then
    raise Exception.Create('Segundo valor invalido');

  RESTClient1.BaseURL := Format(URL, [pOperacao, xValor1, xValor2]);
  RESTRequest1.Execute;

  lblResultado.Caption := RESTResponse1.Content;

end;

end.
