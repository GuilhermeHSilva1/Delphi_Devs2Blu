unit UFraBet.Registry;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants, 
  FMX.Types, FMX.Graphics, FMX.Controls, FMX.Forms, FMX.Dialogs, FMX.StdCtrls,
  FMX.Controls.Presentation, FMX.Edit, FMX.Objects, FMX.Layouts,
  FMX.ListView.Types, FMX.ListView.Appearances, FMX.ListView.Adapters.Base,
  FMX.ListView,

  UEntity.Matchs;

type
  TFraBetRegistry = class(TFrame)
    rectPrincipal: TRectangle;
    lytPrincipal: TLayout;
    ImgLogo: TImage;
    lytBotoes: TLayout;
    rectSalvar: TRectangle;
    Label1: TLabel;
    rectVoltar: TRectangle;
    Label3: TLabel;
    lstPartidas: TListView;
    rectTimeA: TRectangle;
    rectTimeB: TRectangle;
    edtResultadoTeamA: TEdit;
    edtResultadoTeamB: TEdit;
    lblX: TLabel;
  private
    { Private declarations }
    procedure VoltarTela;
    procedure CarregarMatchs;
    procedure Registrar;
    procedure PreencherMatchs(const aMatch: TMatch);
  public
    constructor Create(aOwner: TComponent); override;
end;

var
  fraBetRegistry: TFraBetRegistry;

implementation

uses
  UFraBet,
  UService.Intf,
  UService.Team,
  UService.Match,
  UEntity.Bets,
  UService.Bet,
  UService.User.Authenticated;

{$R *.fmx}

{ TFraBetRegistry }

procedure TFraBetRegistry.CarregarMatchs;
var
  xServiceMath: IService;
  xMatch: TMatch;
begin
  lstPartidas.Items.Clear;

  xServiceMath := TServiceMatch.Create;
  xServiceMath.Listar;
  for xMatch  in TServiceMatch(xServiceMath).Matchs do
    Self.PreencherMatchs(xMatch);

end;

constructor TFraBetRegistry.Create(aOwner: TComponent);
begin
  inherited Create(aOwner);
  Self.CarregarMatchs;
end;

procedure TFraBetRegistry.PreencherMatchs;
var
  xItem: TListViewItem;
const
  PARTIDA = '%s X %s - %s às %s';
begin
  xItem := lstPartidas.Items.Add;
  xItem.Tag := aMatch.Id;

  TListItemText(xItem.Objects.FindDrawable('txtPartida')).Text :=
    Format(PARTIDA, [aMatch.TeamA.Name,
                     aMatch.TeamB.Name,
                     DateToStr(aMatch.Date),
                     TimeToStr(aMatch.Hour)]);
end;

procedure TFraBetRegistry.Registrar;
var
  xServiceBet: IService;
  xBet: TBet;
  xMatch: TMatch;
  xUserAuthenticated: TUserAuthenticated;
begin

end;

procedure TFraBetRegistry.VoltarTela;
begin
  if not Assigned(FraBet) then
    FraBet := TFraBet.Create(Application);

    FraBet.Align := TAlignLayout.Center;

    Self.Parent.AddObject(FraBet);
    FreeAndNil(FraBetRegistry);
end;

end.
