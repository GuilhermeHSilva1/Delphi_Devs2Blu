program Calculadora;

{$APPTYPE CONSOLE}

uses
  Horse,
  System.SysUtils,
  ICalcular in 'pattern\ICalcular.pas',
  UCalculadora in 'pattern\UCalculadora.pas',
  UUtils in 'pattern\UUtils.pas';

const Operacao = 'somar';
begin

  THorse.Get('/somar/:valor1/:valor2', TUtils.Somar);

  THorse.Get('/subtrair/:valor1/:valor2',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var
      xValor1,
      xValor2: Double;
      xCalculadora: ICalculadora;
      xResultado: Double;
    begin
      if Req.Params.Count <> 2 then
      begin
        Res.Send('Parâmetros Incorretos!');
        Exit;
      end;

      if not TryStrToFloat(Req.Params.Items['valor1'], xValor1) then
      begin
        Res.Send('Valor 1 Incorreto!');
        Exit;
      end;

      if not TryStrToFloat(Req.Params.Items['valor2'], xValor2) then
      begin
        Res.Send('Valor 2 Incorreto!');
        Exit;
      end;

      xCalculadora := TCalculadora.Create;
      xResultado   := xCalculadora.Subtrair(xValor1, xValor2);

      Res.Send('Subtração: ' + xResultado.ToString);
    end);

      THorse.Get('/multiplicar/:valor1/:valor2',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var
      xValor1,
      xValor2: Double;
      xCalculadora: ICalculadora;
      xResultado: Double;
    begin
      if Req.Params.Count <> 2 then
      begin
        Res.Send('Parâmetros Incorretos!');
        Exit;
      end;

      if not TryStrToFloat(Req.Params.Items['valor1'], xValor1) then
      begin
        Res.Send('Valor 1 Incorreto!');
        Exit;
      end;

      if not TryStrToFloat(Req.Params.Items['valor2'], xValor2) then
      begin
        Res.Send('Valor 2 Incorreto!');
        Exit;
      end;

      xCalculadora := TCalculadora.Create;
      xResultado   := xCalculadora.Multiplicar(xValor1, xValor2);

      Res.Send('Multiplicação: ' + xResultado.ToString);
    end);

      THorse.Get('/dividir/:valor1/:valor2',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var
      xValor1,
      xValor2: Double;
      xCalculadora: ICalculadora;
      xResultado: Double;
    begin
      if Req.Params.Count <> 2 then
      begin
        Res.Send('Parâmetros Incorretos!');
        Exit;
      end;

      if not TryStrToFloat(Req.Params.Items['valor1'], xValor1) then
      begin
        Res.Send('Valor 1 Incorreto!');
        Exit;
      end;

      if not TryStrToFloat(Req.Params.Items['valor2'], xValor2) then
      begin
        Res.Send('Valor 2 Incorreto!');
        Exit;
      end;

      xCalculadora := TCalculadora.Create;
      xResultado   := xCalculadora.Dividir(xValor1, xValor2);

      Res.Send('Divisão: ' + xResultado.ToString);
    end);


  THorse.Listen(1234,
    procedure(Horse: THorse)
    begin
      Writeln('Server is runing on port ' + IntToStr(Horse.Port));
    end);
end.