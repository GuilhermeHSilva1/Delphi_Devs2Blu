unit UService.Match;

interface

uses
  UEntity.Matchs,
  Uservice.base,
  Generics.Collections;

type
  TServiceMatch = class(TServiceBase)
    private
      FMatch: TMatch;
      FMatchs: TObjectList<TMatch>;

    public
      constructor Create; overload;
      constructor Create(aMatch: TMatch); overload;
      destructor Destroy; override;

      procedure Registrar; override;
      procedure Listar; override;
      procedure Excluir; override;

      function ObterRegistro(const aId: Integer): TObject; override;

      property Matchs: TObjectList<TMatch> read GetMatchs;
  end;

implementation

{ TServiceMatch }

uses
  REST.Types,
  System.JSON, System.SysUtils, System.Classes, FireDac.comp.Client, DataSet.Serialize,
  UUtils.Constants;

{ TServiceMatch }

constructor TServiceMatch.Create;
begin
  Inherited Create;
end;

constructor TServiceMatch.Create(aMatch: TMatch);
begin
  FMatch := aMatch
end;

destructor TServiceMatch.Destroy;
begin
  FreeAndNil(FMatch);
  inherited;
end;

procedure TServiceMatch.Excluir;
begin
  inherited;

end;

procedure TServiceMatch.Listar;
begin
  inherited;

end;

function TServiceMatch.ObterRegistro(const aId: Integer): TObject;
var
  xMemTable: TFDMemTable;
begin
  Result := nil;

  xMemTable := TFDMemTable.Create(nil);

  try
    FRESTClient.BaseURL := URL_BASE_MATCH + '/' + aId.ToString;
    FRESTRequest.Method := rmGet;
    FRESTRequest.Execute;

    if FRESTResponse.StatusCode = API_SUCESSO then
    begin
      xMemTable.LoadFromJSON(FRESTResponse.Content);

      if xMemTable.FindFirst then
        Result := TMatch.Create(xMemTable.FieldByName('id').AsInteger);
    end;
  finally
    FreeAndNil(xMemTable);
  end;
end;

procedure TServiceMatch.Registrar;
begin
  try
    FRESTClient.BaseURL := URL_BASE_MATCH;
    FRESTRequest.Method := rmPost;
    FRESTRequest.Params.AddBody(FMatch.JSON);
    FRESTRequest.Execute;

    case FRESTResponse.StatusCode of
      API_CRIADO:
        Exit;
      API_NAO_AUTORIZADO:
        raise Exception.Create('Usuário não autorizado.');
      else
        raise Exception.Create('Erro não catalogado.');
    end;
  except
    on e: exception do
      raise Exception.Create(E.Message);
  end;
end;

end.
