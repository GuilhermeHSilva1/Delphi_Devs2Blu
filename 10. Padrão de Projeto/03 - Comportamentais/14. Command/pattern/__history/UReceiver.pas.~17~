unit UReceiver;

interface

type
  TReceiver = class
    public
      procedure ExtrairProcessor;
      procedure ExtrairProgramas;
      procedure ExtrairVariaveisAmbiente;
  end;

implementation

uses
  Dialogs, Messages, Windows, TlHelp32, psAPI,
  SysUtils, Registry, Classes;

{ TReceiver }

procedure TReceiver.ExtrairProcessor;
var
  xHandle: THandle;
  xProcessEntry: TProcessEntry32;
  xListaProcessos: TStringList;
begin
  //Método responsável por extrair a lista de processos em execução

  xHandle := CreateToolHelp32Snapshot(TH32CS_SNAPPROCESS, 0);
  xListaProcessos := TStringList.Create;
  try
    xProcessEntry.dwSize := SizeOf(TProcessEntry32);
    Process32Next(xHandle, xProcessEntry);

    //Percorre os processos que estão em execução,
    //Adicionando0os na variável ListaProcessos
    repeat
      xListaProcessos.Add(xProcessEntry.szExeFile)
    until Process32Next(xHandle, xProcessEntry);

    //Grava a lista de processos no arquivo 'Processos.txt'
    xListaProcessos.SaveToFile(GetCurrentDir + '\Processos.txt');
  finally
    CloseHandle(xHandle);
    FreeAndNil(xListaProcessos);
  end;
end;

procedure TReceiver.ExtrairProgramas;
const
  CHAVE_REGISTRO =
  '\Software\Microsoft\Windows\CurrentVersions\Uninstall\';
var
  xRegistro: TRegistry;
  xContador: Integer;
  xListaChave: TStringList;
  xListaPrograma: TStringList;
begin

  xRegistro := TRegistry.Create;
  xListaChave := TStringList.Create;
  xListaPrograma := TStringList.Create;
  try

    xRegistro.RootKey := HKEY_LOCAL_MACHINE;
    xRegistro.OpenKey(CHAVE_REGISTRO, False);
    xRegistro.GetKeyNames(xListaChave);
    xRegistro.CloseKey;

    for xContador := 0 to Pred(xListaChave.Count) do
    begin
      xRegistro.RootKey := HKEY_LOCAL_MACHINE;
      xRegistro.OpenKey(CHAVE_REGISTRO + xListaChave[xContador], False);

      if xRegistro.ReadString('DisplayName') <> EmptyStr then
        xListaPrograma.Add(xRegistro.ReadString('DisplayName'));

      xRegistro.CloseKey;
    end;

    xListaPrograma.SaveToFile(GetCurrentDir + '\Programas.txt');
  finally
    FreeAndNil(xListaPrograma);
    FreeAndNil(xListaChave);
    FreeAndNil(xRegistro);
  end;
end;

procedure TReceiver.ExtrairVariaveisAmbiente;
var
  xVariavel: PChar;
  xListaVariaveis: TStringList;
begin

  xListaVariaveis := TStringList.Create;
  try

    xVariavel := GetEnvironmentStrings;
    while xVariavel^ <> #0 do
    begin
      xListaVariaveis.Add(StrPas(xVariavel));
      xListaVariaveis.Add(EmptyStr);
      Inc(xVariavel, lStrLen(xVariavel) + 1);
    end;
    FreeEnvironmentStrings(xVariavel);

    xListaVariaveis.SaveToFile(GetCurrentDir + '\Variaveis.txt');
  finally
    FreeAndNil(xListaVariaveis);
  end;
end;

end.
