unit UInvoice;

interface

type
  TInvoice = class
    private
      FBaiscPayment: Double;
      FTax: Double;
    function GetBasicPayment: Double;
    procedure SetBasicPayment(const Value: Double);
    function GetTax: Double;
    procedure SetTax(const Value: Double);
    public
      constructor Create (const aBasicPayment: Double);

      function TotalPayment: Double;

      property BasicPayment: Double read GetBasicPayment write SetBasicPayment;
      property Tax: Double read GetTax write SetTax;
  end;

implementation

{ TInvoice }

constructor TInvoice.Create(const aBasicPayment: Double);
begin

end;

function TInvoice.GetBasicPayment: Double;
begin

end;

function TInvoice.GetTax: Double;
begin

end;

procedure TInvoice.SetBasicPayment(const Value: Double);
begin

end;

procedure TInvoice.SetTax(const Value: Double);
begin

end;

function TInvoice.TotalPayment: Double;
begin

end;

end.
